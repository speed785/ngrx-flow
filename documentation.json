{
  "pipes": [],
  "interfaces": [
    {
      "name": "Chainable",
      "id": "interface-Chainable-ea23acd80fc8c355d0a7601f33ba03ca",
      "file": "apps/nf-e2e/src/support/commands.ts",
      "type": "interface",
      "sourceCode": "declare namespace Cypress {\n  interface Chainable<Subject> {\n    login(email: string, password: string): void;\n  }\n}\n//\n// -- This is a parent command --\nCypress.Commands.add('login', (email, password) => {\n  console.log('Custom command example: Login', email, password);\n});\n//\n// -- This is a child command --\n// Cypress.Commands.add(\"drag\", { prevSubject: 'element'}, (subject, options) => { ... })\n//\n//\n// -- This is a dual command --\n// Cypress.Commands.add(\"dismiss\", { prevSubject: 'optional'}, (subject, options) => { ... })\n//\n//\n// -- This will overwrite an existing command --\n// Cypress.Commands.overwrite(\"visit\", (originalFn, url, options) => { ... })\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 152,
      "methods": [
        {
          "name": "login",
          "args": [
            {
              "name": "email",
              "type": "string"
            },
            {
              "name": "password",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 13,
          "jsdoctags": [
            {
              "name": "email",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "password",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Message",
      "id": "interface-Message-0bc617f4b2ef4e1bfb2a4288e7d2c957",
      "file": "libs/api-interfaces/src/lib/api-interfaces.ts",
      "type": "interface",
      "sourceCode": "export interface Message {\n  message: string; //type that both data api and front end will use. \n}\n",
      "properties": [
        {
          "name": "message",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "PeopleEntity",
      "id": "interface-PeopleEntity-acc1bd8c2c35fb90c1c31b733982f10a",
      "file": "libs/people/src/lib/+state/people.models.ts",
      "type": "interface",
      "sourceCode": "export interface PeopleEntity {\n  id: string; // Primary ID\n  count: number;\n  next: string;\n  previous: string;\n  results: Person[];\n}\n\nexport interface Person {\n  id: string | number;\n  birth_year: string;\n  created: string;\n  edited: string;\n  eye_color: string;\n  hair_color: string;\n  skin_color: string;\n  species: [];\n  films: string[];\n  gender: string;\n  name: string;\n  homeworld: string[];\n}\n\n// birth_year: \"19BBY\"\n// created: \"2014-12-09T13:50:51.644000Z\"\n// edited: \"2014-12-20T21:17:56.891000Z\"\n// eye_color: \"blue\"\n// films: (4) [\"http://swapi.dev/api/films/1/\", \"http://swapi.dev/api/films/2/\", \"http://swapi.dev/api/films/3/\", \"http://swapi.dev/api/films/6/\"]\n// gender: \"male\"\n// hair_color: \"blond\"\n// height: \"172\"\n// homeworld: \"http://swapi.dev/api/planets/1/\"\n// id: \"44e9e689-9593-4016-963b-c8993aa9d9e0\"\n// mass: \"77\"\n// name: \"Luke Skywalker\"\n// skin_color: \"fair\"\n// species: []\n// component: (2) [\"http://swapi.dev/api/starships/12/\", \"http://swapi.dev/api/starships/22/\"]\n// url: \"http://swapi.dev/api/people/1/\"\n// vehicles: (2) [\"http://swapi.dev/api/vehicles/14/\", \"http://swapi.dev/api/vehicles/30/\"]",
      "properties": [
        {
          "name": "count",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "next",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "previous",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "results",
          "type": "Person[]",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "description": "<p>Interface for the &#39;People&#39; data</p>\n",
      "methods": []
    },
    {
      "name": "PeoplePartialState",
      "id": "interface-PeoplePartialState-ca93b2a5e39599287cf69da4f6b7a4e8",
      "file": "libs/people/src/lib/+state/people.reducer.ts",
      "type": "interface",
      "sourceCode": "import { createReducer, on, Action } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport * as PeopleActions from './people.actions';\nimport { PeopleEntity } from './people.models';\nexport const PEOPLE_FEATURE_KEY = 'people';\nexport interface State extends EntityState<PeopleEntity> {\n  selectedId?: string | number; // which People record has been selected\n  loaded: boolean; // has the People list been loaded\n  error?: string | null; // last known error (if any)\n}\nexport interface PeoplePartialState {\n  readonly [PEOPLE_FEATURE_KEY]: State;\n}\nexport const peopleAdapter: EntityAdapter<PeopleEntity> = createEntityAdapter<\n    PeopleEntity\n    >();\nexport const initialState: State = peopleAdapter.getInitialState({\n  // set initial required properties\n  loaded: false,\n});\nconst peopleReducer = createReducer(\n    initialState,\n    on(PeopleActions.init, (state) => ({ ...state, loaded: false, error: null })),\n    on(PeopleActions.loadPeopleSuccess, (state, { people }) =>\n        peopleAdapter.setOne(people, { ...state, loaded: true })\n    ),\n    on(PeopleActions.loadPeopleFailure, (state, { error }) => ({\n      ...state,\n      error,\n    }))\n);\n\nexport function reducer(state: State | undefined, action: Action) {\n  return peopleReducer(state, action);\n}\n",
      "properties": [
        {
          "name": "PEOPLE_FEATURE_KEY",
          "type": "State",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [132]
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "Person",
      "id": "interface-Person-acc1bd8c2c35fb90c1c31b733982f10a",
      "file": "libs/people/src/lib/+state/people.models.ts",
      "type": "interface",
      "sourceCode": "export interface PeopleEntity {\n  id: string; // Primary ID\n  count: number;\n  next: string;\n  previous: string;\n  results: Person[];\n}\n\nexport interface Person {\n  id: string | number;\n  birth_year: string;\n  created: string;\n  edited: string;\n  eye_color: string;\n  hair_color: string;\n  skin_color: string;\n  species: [];\n  films: string[];\n  gender: string;\n  name: string;\n  homeworld: string[];\n}\n\n// birth_year: \"19BBY\"\n// created: \"2014-12-09T13:50:51.644000Z\"\n// edited: \"2014-12-20T21:17:56.891000Z\"\n// eye_color: \"blue\"\n// films: (4) [\"http://swapi.dev/api/films/1/\", \"http://swapi.dev/api/films/2/\", \"http://swapi.dev/api/films/3/\", \"http://swapi.dev/api/films/6/\"]\n// gender: \"male\"\n// hair_color: \"blond\"\n// height: \"172\"\n// homeworld: \"http://swapi.dev/api/planets/1/\"\n// id: \"44e9e689-9593-4016-963b-c8993aa9d9e0\"\n// mass: \"77\"\n// name: \"Luke Skywalker\"\n// skin_color: \"fair\"\n// species: []\n// component: (2) [\"http://swapi.dev/api/starships/12/\", \"http://swapi.dev/api/starships/22/\"]\n// url: \"http://swapi.dev/api/people/1/\"\n// vehicles: (2) [\"http://swapi.dev/api/vehicles/14/\", \"http://swapi.dev/api/vehicles/30/\"]",
      "properties": [
        {
          "name": "birth_year",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "created",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "edited",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "eye_color",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "films",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "gender",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "hair_color",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "homeworld",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "id",
          "type": "string | number",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "skin_color",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "species",
          "type": "",
          "optional": false,
          "description": "",
          "line": 20
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "PlanetsEntity",
      "id": "interface-PlanetsEntity-9a0d3a3ccb2de817caea7ee58e1ef38d",
      "file": "libs/planets/src/lib/+state/planets.models.ts",
      "type": "interface",
      "sourceCode": "export interface PlanetsEntity {\n    id: string; // Primary ID\n    count: number;\n    next: string;\n    previous: string;\n    results: Worlds[];\n}\n\nexport interface Worlds {\n    id: string | number;\n    name: string;\n    rotation_period: string;\n    orbital_period: string;\n    diameter: string;\n    climate: string;\n    gravity: string;\n    terrain: string;\n    surface_water: string;\n    population: string;\n    residents: string[];\n}\n\n\n\n\n// {\n//     \"name\": \"Tatooine\",\n//     \"rotation_period\": \"23\",\n//     \"orbital_period\": \"304\",\n//     \"diameter\": \"10465\",\n//     \"climate\": \"arid\",\n//     \"gravity\": \"1 standard\",\n//     \"terrain\": \"desert\",\n//     \"surface_water\": \"1\",\n//     \"population\": \"200000\",\n//     \"residents\": [\n//     \"http://swapi.dev/api/people/1/\",\n//     \"http://swapi.dev/api/people/2/\",\n//     \"http://swapi.dev/api/people/4/\",\n//     \"http://swapi.dev/api/people/6/\",\n//     \"http://swapi.dev/api/people/7/\",\n//     \"http://swapi.dev/api/people/8/\",\n//     \"http://swapi.dev/api/people/9/\",\n//     \"http://swapi.dev/api/people/11/\",\n//     \"http://swapi.dev/api/people/43/\",\n//     \"http://swapi.dev/api/people/62/\"\n// ],\n//     \"films\": [\n//     \"http://swapi.dev/api/films/1/\",\n//     \"http://swapi.dev/api/films/3/\",\n//     \"http://swapi.dev/api/films/4/\",\n//     \"http://swapi.dev/api/films/5/\",\n//     \"http://swapi.dev/api/films/6/\"\n// ],\n//     \"created\": \"2014-12-09T13:50:49.641000Z\",\n//     \"edited\": \"2014-12-20T20:58:18.411000Z\",\n//     \"url\": \"http://swapi.dev/api/planets/1/\"\n// }",
      "properties": [
        {
          "name": "count",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "next",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "previous",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "results",
          "type": "Worlds[]",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "description": "<p>Interface for the &#39;People&#39; data</p>\n",
      "methods": []
    },
    {
      "name": "PlanetsPartialState",
      "id": "interface-PlanetsPartialState-9ee52d73faaa0a7e70f7c10bd339dffb",
      "file": "libs/planets/src/lib/+state/planets.reducer.ts",
      "type": "interface",
      "sourceCode": "import { createReducer, on, Action } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport * as PlanetsActions from './planets.actions';\nimport { PlanetsEntity } from './planets.models';\nexport const PLANETS_FEATURE_KEY = 'planets';\nexport interface State extends EntityState<PlanetsEntity> {\n    selectedId?: string | number; // which Planets record has been selected\n    loaded: boolean; // has the Planets list been loaded\n    error?: string | null; // last known error (if any)\n}\nexport interface PlanetsPartialState {\n    readonly [PLANETS_FEATURE_KEY]: State;\n}\nexport const planetsAdapter: EntityAdapter<PlanetsEntity> = createEntityAdapter<\n    PlanetsEntity\n    >();\nexport const initialState: State = planetsAdapter.getInitialState({\n    // set initial required properties\n    loaded: false,\n});\nconst planetsReducer = createReducer(\n    initialState,\n    on(PlanetsActions.init, (state) => ({ ...state, loaded: false, error: null })),\n    on(PlanetsActions.loadPlanetsSuccess, (state, { planets }) =>\n        planetsAdapter.setOne(planets, { ...state, loaded: true })\n    ),\n    on(PlanetsActions.loadPlanetsFailure, (state, { error }) => ({\n        ...state,\n        error,\n    }))\n);\n\nexport function reducer(state: State | undefined, action: Action) {\n    return planetsReducer(state, action);\n}\n",
      "properties": [
        {
          "name": "PLANETS_FEATURE_KEY",
          "type": "State",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [132]
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "State",
      "id": "interface-State-ca93b2a5e39599287cf69da4f6b7a4e8",
      "file": "libs/people/src/lib/+state/people.reducer.ts",
      "type": "interface",
      "sourceCode": "import { createReducer, on, Action } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport * as PeopleActions from './people.actions';\nimport { PeopleEntity } from './people.models';\nexport const PEOPLE_FEATURE_KEY = 'people';\nexport interface State extends EntityState<PeopleEntity> {\n  selectedId?: string | number; // which People record has been selected\n  loaded: boolean; // has the People list been loaded\n  error?: string | null; // last known error (if any)\n}\nexport interface PeoplePartialState {\n  readonly [PEOPLE_FEATURE_KEY]: State;\n}\nexport const peopleAdapter: EntityAdapter<PeopleEntity> = createEntityAdapter<\n    PeopleEntity\n    >();\nexport const initialState: State = peopleAdapter.getInitialState({\n  // set initial required properties\n  loaded: false,\n});\nconst peopleReducer = createReducer(\n    initialState,\n    on(PeopleActions.init, (state) => ({ ...state, loaded: false, error: null })),\n    on(PeopleActions.loadPeopleSuccess, (state, { people }) =>\n        peopleAdapter.setOne(people, { ...state, loaded: true })\n    ),\n    on(PeopleActions.loadPeopleFailure, (state, { error }) => ({\n      ...state,\n      error,\n    }))\n);\n\nexport function reducer(state: State | undefined, action: Action) {\n  return peopleReducer(state, action);\n}\n",
      "properties": [
        {
          "name": "error",
          "type": "string | null",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "loaded",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "selectedId",
          "type": "string | number",
          "optional": true,
          "description": "",
          "line": 7
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": [],
      "extends": "EntityState"
    },
    {
      "name": "State",
      "id": "interface-State-9ee52d73faaa0a7e70f7c10bd339dffb-1",
      "file": "libs/planets/src/lib/+state/planets.reducer.ts",
      "type": "interface",
      "sourceCode": "import { createReducer, on, Action } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport * as PlanetsActions from './planets.actions';\nimport { PlanetsEntity } from './planets.models';\nexport const PLANETS_FEATURE_KEY = 'planets';\nexport interface State extends EntityState<PlanetsEntity> {\n    selectedId?: string | number; // which Planets record has been selected\n    loaded: boolean; // has the Planets list been loaded\n    error?: string | null; // last known error (if any)\n}\nexport interface PlanetsPartialState {\n    readonly [PLANETS_FEATURE_KEY]: State;\n}\nexport const planetsAdapter: EntityAdapter<PlanetsEntity> = createEntityAdapter<\n    PlanetsEntity\n    >();\nexport const initialState: State = planetsAdapter.getInitialState({\n    // set initial required properties\n    loaded: false,\n});\nconst planetsReducer = createReducer(\n    initialState,\n    on(PlanetsActions.init, (state) => ({ ...state, loaded: false, error: null })),\n    on(PlanetsActions.loadPlanetsSuccess, (state, { planets }) =>\n        planetsAdapter.setOne(planets, { ...state, loaded: true })\n    ),\n    on(PlanetsActions.loadPlanetsFailure, (state, { error }) => ({\n        ...state,\n        error,\n    }))\n);\n\nexport function reducer(state: State | undefined, action: Action) {\n    return planetsReducer(state, action);\n}\n",
      "properties": [
        {
          "name": "error",
          "type": "string | null",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "loaded",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "selectedId",
          "type": "string | number",
          "optional": true,
          "description": "",
          "line": 7
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": [],
      "extends": "EntityState",
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "State-1"
    },
    {
      "name": "Worlds",
      "id": "interface-Worlds-9a0d3a3ccb2de817caea7ee58e1ef38d",
      "file": "libs/planets/src/lib/+state/planets.models.ts",
      "type": "interface",
      "sourceCode": "export interface PlanetsEntity {\n    id: string; // Primary ID\n    count: number;\n    next: string;\n    previous: string;\n    results: Worlds[];\n}\n\nexport interface Worlds {\n    id: string | number;\n    name: string;\n    rotation_period: string;\n    orbital_period: string;\n    diameter: string;\n    climate: string;\n    gravity: string;\n    terrain: string;\n    surface_water: string;\n    population: string;\n    residents: string[];\n}\n\n\n\n\n// {\n//     \"name\": \"Tatooine\",\n//     \"rotation_period\": \"23\",\n//     \"orbital_period\": \"304\",\n//     \"diameter\": \"10465\",\n//     \"climate\": \"arid\",\n//     \"gravity\": \"1 standard\",\n//     \"terrain\": \"desert\",\n//     \"surface_water\": \"1\",\n//     \"population\": \"200000\",\n//     \"residents\": [\n//     \"http://swapi.dev/api/people/1/\",\n//     \"http://swapi.dev/api/people/2/\",\n//     \"http://swapi.dev/api/people/4/\",\n//     \"http://swapi.dev/api/people/6/\",\n//     \"http://swapi.dev/api/people/7/\",\n//     \"http://swapi.dev/api/people/8/\",\n//     \"http://swapi.dev/api/people/9/\",\n//     \"http://swapi.dev/api/people/11/\",\n//     \"http://swapi.dev/api/people/43/\",\n//     \"http://swapi.dev/api/people/62/\"\n// ],\n//     \"films\": [\n//     \"http://swapi.dev/api/films/1/\",\n//     \"http://swapi.dev/api/films/3/\",\n//     \"http://swapi.dev/api/films/4/\",\n//     \"http://swapi.dev/api/films/5/\",\n//     \"http://swapi.dev/api/films/6/\"\n// ],\n//     \"created\": \"2014-12-09T13:50:49.641000Z\",\n//     \"edited\": \"2014-12-20T20:58:18.411000Z\",\n//     \"url\": \"http://swapi.dev/api/planets/1/\"\n// }",
      "properties": [
        {
          "name": "climate",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "diameter",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "gravity",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "id",
          "type": "string | number",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "orbital_period",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "population",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "residents",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "rotation_period",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "surface_water",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "terrain",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 20
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    }
  ],
  "injectables": [
    {
      "name": "AppService",
      "id": "injectable-AppService-8dc2d2edba640d821946dc36fc8fe21a",
      "file": "apps/api/src/app/app.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "getData",
          "args": [],
          "optional": false,
          "returnType": "Message",
          "typeParameters": [],
          "line": 6
        }
      ],
      "description": "",
      "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { Message } from '@ngrx-flow/api-interfaces';\n\n@Injectable()\nexport class AppService {\n  getData(): Message {\n    return { message: 'Welcome to api!' };\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "PeopleEffects",
      "id": "injectable-PeopleEffects-aab1dfefb8b472a7db698d07c7c25f85",
      "file": "libs/people/src/lib/+state/people.effects.ts",
      "properties": [
        {
          "name": "init$",
          "defaultValue": "createEffect(() =>\n        this.actions$.pipe(\n            ofType(PeopleActions.init),\n            flatMap(() => this.swapiService.get()),\n            map((peopleResults: PeopleEntity) => {\n                peopleResults.id = uuid.v4();\n                peopleResults.results.map(result => {\n                    result.id = uuid.v4();\n                    return result;\n                })\n                return PeopleActions.loadPeopleSuccess({ people: peopleResults })\n            }),\n            delay(1000),\n            catchError((err) => of(PeopleActions.loadPeopleFailure({error: new Error(err)})))\n        )\n    )",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport * as PeopleActions from './people.actions';\nimport { catchError, delay, flatMap, map } from 'rxjs/operators';\nimport { SwapiService } from '@ngrx-flow/shared/services';\nimport { of } from 'rxjs';\nimport * as uuid from 'uuid';\nimport { PeopleEntity } from '@ngrx-flow/people';\n@Injectable()\nexport class PeopleEffects {\n    init$ = createEffect(() =>\n        this.actions$.pipe(\n            ofType(PeopleActions.init),\n            flatMap(() => this.swapiService.get()),\n            map((peopleResults: PeopleEntity) => {\n                peopleResults.id = uuid.v4();\n                peopleResults.results.map(result => {\n                    result.id = uuid.v4();\n                    return result;\n                })\n                return PeopleActions.loadPeopleSuccess({ people: peopleResults })\n            }),\n            delay(1000),\n            catchError((err) => of(PeopleActions.loadPeopleFailure({error: new Error(err)})))\n        )\n    );\n    constructor(\n        private actions$: Actions,\n        private swapiService: SwapiService\n    ) {}\n}",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "actions$",
            "type": "Actions"
          },
          {
            "name": "swapiService",
            "type": "SwapiService"
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "actions$",
            "type": "Actions",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "swapiService",
            "type": "SwapiService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "PeopleFacade",
      "id": "injectable-PeopleFacade-29cfd1c0a232a7179b87a00fa56ee6fd",
      "file": "libs/people/src/lib/+state/people.facade.ts",
      "properties": [
        {
          "name": "allPeople$",
          "defaultValue": "this.store.pipe(select(PeopleSelectors.getAllPeople))",
          "type": "",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "count$",
          "defaultValue": "this.store.pipe(select(PeopleSelectors.getCount))",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "loaded$",
          "defaultValue": "this.store.pipe(select(PeopleSelectors.getPeopleLoaded))",
          "type": "",
          "optional": false,
          "description": "<p>Combine pieces of state using createSelector,\nand expose them as observables through the facade.</p>\n",
          "line": 11
        },
        {
          "name": "selectedPeople$",
          "defaultValue": "this.store.pipe(select(PeopleSelectors.getSelected))",
          "type": "",
          "optional": false,
          "description": "",
          "line": 14
        }
      ],
      "methods": [
        {
          "name": "init",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "description": "<p>Use the initialization action to perform one\nor more tasks in your Effects.</p>\n"
        }
      ],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport * as PeopleActions from './people.actions';\nimport * as PeopleSelectors from './people.selectors';\n@Injectable()\nexport class PeopleFacade {\n  /**\n   * Combine pieces of state using createSelector,\n   * and expose them as observables through the facade.\n   */\n  loaded$ = this.store.pipe(select(PeopleSelectors.getPeopleLoaded));\n  allPeople$ = this.store.pipe(select(PeopleSelectors.getAllPeople));\n  count$ = this.store.pipe(select(PeopleSelectors.getCount));\n  selectedPeople$ = this.store.pipe(select(PeopleSelectors.getSelected));\n  constructor(private store: Store) {}\n  /**\n   * Use the initialization action to perform one\n   * or more tasks in your Effects.\n   */\n  init() {\n    this.store.dispatch(PeopleActions.init());\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "store",
            "type": "Store"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "PlanetsEffects",
      "id": "injectable-PlanetsEffects-3be77726adbf2ff0304c5b0dee3fb283",
      "file": "libs/planets/src/lib/+state/planets.effects.ts",
      "properties": [
        {
          "name": "init$",
          "defaultValue": "createEffect(() =>\n      this.actions$.pipe(\n          ofType(PlanetsActions.init),\n          flatMap(() => this.swapiService.getPlanets()),\n          map((planetsResults: PlanetsEntity) => {\n            planetsResults.id = uuid.v4();\n            planetsResults.results.map(result => {\n              result.id = uuid.v4();\n              return result;\n            })\n            return PlanetsActions.loadPlanetsSuccess({ planets: planetsResults })\n          }),\n          delay(1000),\n          catchError((err) => of(PlanetsActions.loadPlanetsFailure({error: new Error(err)})))\n      )\n  )",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport * as PlanetsActions from './planets.actions';\nimport { catchError, delay, flatMap, map } from 'rxjs/operators';\nimport { SwapiService } from '@ngrx-flow/shared/services';\nimport { of } from 'rxjs';\nimport * as uuid from 'uuid';\nimport { PlanetsEntity } from '../+state/planets.models';\n@Injectable()\nexport class PlanetsEffects {\n  init$ = createEffect(() =>\n      this.actions$.pipe(\n          ofType(PlanetsActions.init),\n          flatMap(() => this.swapiService.getPlanets()),\n          map((planetsResults: PlanetsEntity) => {\n            planetsResults.id = uuid.v4();\n            planetsResults.results.map(result => {\n              result.id = uuid.v4();\n              return result;\n            })\n            return PlanetsActions.loadPlanetsSuccess({ planets: planetsResults })\n          }),\n          delay(1000),\n          catchError((err) => of(PlanetsActions.loadPlanetsFailure({error: new Error(err)})))\n      )\n  );\n  constructor(\n      private actions$: Actions,\n      private swapiService: SwapiService\n  ) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "actions$",
            "type": "Actions"
          },
          {
            "name": "swapiService",
            "type": "SwapiService"
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "actions$",
            "type": "Actions",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "swapiService",
            "type": "SwapiService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "PlanetsFacade",
      "id": "injectable-PlanetsFacade-29f95bf574a841facf05dee4f9980278",
      "file": "libs/planets/src/lib/+state/planets.facade.ts",
      "properties": [
        {
          "name": "allPlanets$",
          "defaultValue": "this.store.pipe(select(PlanetsSelectors.getAllPlanets))",
          "type": "",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "count$",
          "defaultValue": "this.store.pipe(select(PlanetsSelectors.getCount))",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "loaded$",
          "defaultValue": "this.store.pipe(select(PlanetsSelectors.getPlanetsLoaded))",
          "type": "",
          "optional": false,
          "description": "<p>Combine pieces of state using createSelector,\nand expose them as observables through the facade.</p>\n",
          "line": 11
        },
        {
          "name": "selectedPlanets$",
          "defaultValue": "this.store.pipe(select(PlanetsSelectors.getSelected))",
          "type": "",
          "optional": false,
          "description": "",
          "line": 14
        }
      ],
      "methods": [
        {
          "name": "init",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "description": "<p>Use the initialization action to perform one\nor more tasks in your Effects.</p>\n"
        }
      ],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport * as PlanetsActions from './planets.actions';\nimport * as PlanetsSelectors from './planets.selectors';\n@Injectable()\nexport class PlanetsFacade {\n    /**\n     * Combine pieces of state using createSelector,\n     * and expose them as observables through the facade.\n     */\n    loaded$ = this.store.pipe(select(PlanetsSelectors.getPlanetsLoaded));\n    allPlanets$ = this.store.pipe(select(PlanetsSelectors.getAllPlanets));\n    count$ = this.store.pipe(select(PlanetsSelectors.getCount));\n    selectedPlanets$ = this.store.pipe(select(PlanetsSelectors.getSelected));\n    constructor(private store: Store) {}\n    /**\n     * Use the initialization action to perform one\n     * or more tasks in your Effects.\n     */\n    init() {\n        this.store.dispatch(PlanetsActions.init());\n    }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "store",
            "type": "Store"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "SwapiService",
      "id": "injectable-SwapiService-81b85937e4b321c4bd0527570bcc7d7d",
      "file": "libs/shared/services/src/lib/swapi.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "get",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 13
        },
        {
          "name": "getPlanets",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 16
        }
      ],
      "description": "",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SwapiService {\n\n  constructor(private http:HttpClient) {\n\n  }\n\n  get() {\n    return this.http.get('https://swapi.dev/api/people');\n  }\n  getPlanets() {\n    return this.http.get('https://swapi.dev/api/planets');\n  }\n}\n\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient"
          }
        ],
        "line": 7,
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    }
  ],
  "classes": [],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-5be09ae264d96a3d1f9aaedbb1bdf23d",
      "file": "apps/nf/src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "ngrx-flow-root",
      "styleUrls": ["./app.component.scss"],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "hello$",
          "defaultValue": "this.http.get<Message>('https://swapi.dev/api/people/1/')",
          "type": "",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "isCollapsed",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Message } from '@ngrx-flow/api-interfaces';\n\n@Component({\n  selector: 'ngrx-flow-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  isCollapsed = false;\n  hello$ = this.http.get<Message>('https://swapi.dev/api/people/1/');\n  constructor(private http: HttpClient) {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".trigger {\n  font-size: 18px;\n  line-height: 64px;\n  padding: 0 24px;\n  cursor: pointer;\n  transition: color 0.3s;\n}\n\n.trigger:hover {\n  color: #1890ff;\n}\n\n.logo {\n  height: 32px;\n  background: rgba(255, 255, 255, 0.2);\n  margin: 16px;\n}\n\nnz-header {\n  background: #fff;\n  padding: 0;\n}\n\nnz-content {\n  margin: 0 16px;\n}\n\nnz-breadcrumb {\n  margin: 16px 0;\n}\n\n.inner-content {\n  padding: 24px;\n  background: #fff;\n  min-height: 360px;\n}\n\nnz-footer {\n  text-align: center;\n}",
          "styleUrl": "./app.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "http",
            "type": "HttpClient"
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "http",
            "type": "HttpClient",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "templateData": "<nz-layout>\n    <nz-sider nzCollapsible [(nzCollapsed)]=\"isCollapsed\" [nzTrigger]=\"null\">\n        <div class=\"logo\"></div>\n        <ul nz-menu nzTheme=\"dark\" nzMode=\"inline\">\n            <li nz-submenu nzTitle=\"Star Wars\" nzIcon=\"user\">\n                <ul>\n                    <li nz-menu-item [routerLink]=\"['people']\">Characters</li>\n                    <li nz-menu-item [routerLink]=\"['planets']\">Planets</li>\n                    <li nz-menu-item [routerLink]=\"['starships']\">Starships</li>\n                </ul>\n            </li>\n        </ul>\n    </nz-sider>\n    <nz-layout>\n        <nz-header>\n            <i class=\"trigger\" nz-icon [nzType]=\"isCollapsed ? 'menu-unfold' : 'menu-fold'\" (click)=\"isCollapsed = !isCollapsed\"></i>\n        </nz-header>\n        <nz-content>\n            <nz-breadcrumb>\n                <nz-breadcrumb-item>Data</nz-breadcrumb-item>\n            </nz-breadcrumb>\n            <div class=\"inner-content\">\n                <router-outlet></router-outlet>\n            </div>\n        </nz-content>\n        <nz-footer>Ant Design ©2020 Implement By Angular</nz-footer>\n    </nz-layout>\n</nz-layout>"
    },
    {
      "name": "ButtonComponent",
      "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
      "file": "stories/button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-button",
      "styleUrls": ["./button.css"],
      "styles": [],
      "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "backgroundColor",
          "description": "<p>What background color to use</p>\n",
          "line": 26,
          "type": "string"
        },
        {
          "name": "label",
          "defaultValue": "'Button'",
          "description": "<p>Button contents</p>\n",
          "line": 40
        },
        {
          "name": "primary",
          "defaultValue": "false",
          "description": "<p>Is this the principal call to action on the page?</p>\n",
          "line": 20
        },
        {
          "name": "size",
          "defaultValue": "'medium'",
          "description": "<p>How large should the button be?</p>\n",
          "line": 32,
          "type": "\"small\" | \"medium\" | \"large\""
        }
      ],
      "outputsClass": [
        {
          "name": "onClick",
          "defaultValue": "new EventEmitter<Event>()",
          "description": "<p>Optional click handler</p>\n",
          "line": 46,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
          "styleUrl": "./button.css"
        }
      ],
      "stylesData": "",
      "accessors": {
        "classes": {
          "name": "classes",
          "getSignature": {
            "name": "classes",
            "type": "[]",
            "returnType": "string[]",
            "line": 48
          }
        }
      }
    },
    {
      "name": "HeaderComponent",
      "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
      "file": "stories/header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-header",
      "styleUrls": ["./header.css"],
      "styles": [],
      "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "line": 53,
          "type": "unknown"
        }
      ],
      "outputsClass": [
        {
          "name": "onCreateAccount",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 62,
          "type": "EventEmitter"
        },
        {
          "name": "onLogin",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 56,
          "type": "EventEmitter"
        },
        {
          "name": "onLogout",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 59,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
          "styleUrl": "./header.css"
        }
      ],
      "stylesData": ""
    },
    {
      "name": "PageComponent",
      "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
      "file": "stories/page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-page",
      "styleUrls": ["./page.css"],
      "styles": [],
      "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "line": 66,
          "type": "unknown"
        }
      ],
      "outputsClass": [
        {
          "name": "onCreateAccount",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 75,
          "type": "EventEmitter"
        },
        {
          "name": "onLogin",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 69,
          "type": "EventEmitter"
        },
        {
          "name": "onLogout",
          "defaultValue": "new EventEmitter<Event>()",
          "line": 72,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
          "styleUrl": "./page.css"
        }
      ],
      "stylesData": ""
    },
    {
      "name": "PeopleComponent",
      "id": "component-PeopleComponent-7d7f2381b0785aa858767c582b09a073",
      "file": "libs/people/src/lib/component/people/people.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "ngrx-flow-people",
      "styleUrls": ["./people.component.scss"],
      "styles": [],
      "templateUrl": ["./people.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "peopleFacade",
          "type": "PeopleFacade",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { PeopleFacade } from '../../+state/people.facade';\n\n\n@Component({\n  selector: 'ngrx-flow-people',\n  templateUrl: './people.component.html',\n  styleUrls: ['./people.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PeopleComponent implements OnInit {\n\n  constructor(\n    public peopleFacade: PeopleFacade\n    ) { }\n\n  ngOnInit(): void {\n    this.peopleFacade.init();\n\n\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".gutter-row {\n  margin-bottom: 40px;\n}",
          "styleUrl": "./people.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "peopleFacade",
            "type": "PeopleFacade"
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "peopleFacade",
            "type": "PeopleFacade",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div *ngIf='peopleFacade.loaded$ | async'>\n    <h4 *ngIf='peopleFacade.count$ | async as count'>Count: {{count}}</h4>\n    <div nz-row [nzGutter]='{ xs: 8, sm: 16, md: 24, lg: 32 }' *ngIf='peopleFacade.allPeople$ | async as people'>\n        <div nz-col class='gutter-row' [nzSpan]='6' *ngFor='let person of people'>\n            <nz-card [nzTitle]='person.name'\n                     [nzExtra]='extraTemplate'>\n                <h4>Attributes</h4>\n                <ul>\n                    <li>Birth Year: {{person.birth_year}}</li>\n                    <li>Hair Color: {{person.hair_color}}</li>\n                    <li>Skin Color: {{person.skin_color}}</li>\n                    <li data-testId=\"test-eye-color\">Eye Color: {{person.eye_color}}</li>\n                    <li>Gender: {{person.gender}}</li>\n                    <li>Films:\n                        <ul>\n                            <li *ngFor='let film of person.films'>\n                                <div>Open</div>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n            </nz-card>\n        </div>\n    </div>\n</div>\n<ng-container *ngIf='peopleFacade.loaded$ | async; else skeleton'>\n</ng-container>\n<ng-template #skeleton>\n    <div nz-row [nzGutter]='{ xs: 8, sm: 16, md: 24, lg: 32 }'>\n        <nz-card nz-col class='gutter-row' [nzSpan]='6' nzTitle='Loading...'>\n            <nz-skeleton [nzActive]='true'></nz-skeleton>\n        </nz-card>\n    </div>\n</ng-template>\n<ng-template #extraTemplate>\n    <a>More</a>\n</ng-template>"
    },
    {
      "name": "PlanetsComponent",
      "id": "component-PlanetsComponent-6f59620e2ef66d59299b994d24532f0a",
      "file": "libs/planets/src/lib/component/planets/planets.component.ts",
      "encapsulation": ["ViewEncapsulation.Emulated"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "ngrx-flow-starships",
      "styleUrls": ["./planets.component.scss"],
      "styles": [],
      "templateUrl": ["./planets.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "planetsFacade",
          "type": "PlanetsFacade",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, OnInit, ViewEncapsulation } from \"@angular/core\";\nimport {PlanetsFacade} from \"../../+state/planets.facade\";\n\n@Component({\n  selector: \"ngrx-flow-starships\",\n  templateUrl: \"./planets.component.html\",\n  styleUrls: [\"./planets.component.scss\"],\n  encapsulation: ViewEncapsulation.Emulated,\n})\nexport class PlanetsComponent implements OnInit {\n  constructor(\n      public planetsFacade: PlanetsFacade\n  ) {}\n\n  ngOnInit(): void {\n    this.planetsFacade.init();\n}\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".gutter-row {\n  margin-bottom: 40px;\n}",
          "styleUrl": "./planets.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "planetsFacade",
            "type": "PlanetsFacade"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "planetsFacade",
            "type": "PlanetsFacade",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div *ngIf='planetsFacade.loaded$ | async'>\n    <h4 *ngIf='planetsFacade.count$ | async as count'>Count: {{count}}</h4>\n    <div nz-row [nzGutter]='{ xs: 8, sm: 16, md: 24, lg: 32 }' *ngIf='planetsFacade.allPlanets$ | async as planets'>\n        <div nz-col class='gutter-row' [nzSpan]='6' *ngFor='let worlds of planets'>\n            <nz-card [nzTitle]='worlds.name'\n                     [nzExtra]='extraTemplate'>\n                <h4>Attributes</h4>\n                <ul>\n                    <li>Planet Name: {{worlds.name}}</li>\n                    <li>Rotation Period: {{worlds.rotation_period}}</li>\n                    <li>Orbital Period: {{worlds.orbital_period}}</li>\n                    <li>Diameter: {{worlds.diameter}}</li>\n                    <li>Climate: {{worlds.climate}}</li>\n                    <li>Gravity: {{worlds.gravity}}</li>\n                    <li>Terrain: {{worlds.terrain}}</li>\n                    <li>Surface_water: {{worlds.surface_water}}</li>\n                    <li>Population: {{worlds.population}}</li>\n                    <li>Residents:\n                        <ul>\n                            <li *ngFor='let film of worlds.residents'>\n                                <div>Open</div>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n            </nz-card>\n        </div>\n    </div>\n</div>\n<ng-container *ngIf='planetsFacade.loaded$ | async; else skeleton'>\n</ng-container>\n<ng-template #skeleton>\n    <div nz-row [nzGutter]='{ xs: 8, sm: 16, md: 24, lg: 32 }'>\n        <nz-card nz-col class='gutter-row' [nzSpan]='6' nzTitle='Loading...'>\n            <nz-skeleton [nzActive]='true'></nz-skeleton>\n        </nz-card>\n    </div>\n</ng-template>\n<ng-template #extraTemplate>\n    <a>More</a>\n</ng-template>\n"
    },
    {
      "name": "StarshipsComponent",
      "id": "component-StarshipsComponent-1f19355bd62fd2ec93a009ab6536bb2c",
      "file": "libs/starships/src/lib/component/starships/starships.component.ts",
      "encapsulation": ["ViewEncapsulation.Emulated"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "ngrx-flow-starships",
      "styleUrls": ["./starships.component.scss"],
      "styles": [],
      "templateUrl": ["./starships.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import { Component, OnInit, ViewEncapsulation } from \"@angular/core\";\n\n@Component({\n  selector: \"ngrx-flow-starships\",\n  templateUrl: \"./starships.component.html\",\n  styleUrls: [\"./starships.component.scss\"],\n  encapsulation: ViewEncapsulation.Emulated,\n})\nexport class StarshipsComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./starships.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 9
      },
      "implements": ["OnInit"],
      "templateData": "<p>starships works!</p>"
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "AppService"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppRoutingModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "PeopleModule",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "PeopleFacade"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "PeopleComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "SharedServicesModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "PlanetsModule",
      "children": [
        {
          "type": "providers",
          "elements": [
            {
              "name": "PlanetsFacade"
            }
          ]
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "PlanetsComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ReducersModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "SharedServicesModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "StarshipsModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "StarshipsComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "apps/api/src/environments/environment.prod.ts",
        "type": "object",
        "defaultValue": "{\n  production: true,\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "apps/api/src/environments/environment.ts",
        "type": "object",
        "defaultValue": "{\n  production: false,\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "apps/nf/src/environments/environment.prod.ts",
        "type": "object",
        "defaultValue": "{\n  production: true,\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "apps/nf/src/environments/environment.ts",
        "type": "object",
        "defaultValue": "{\n  production: false,\n}"
      },
      {
        "name": "getAll",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(getPeopleState, (state: State) =>\n    selectAll(state)\n)"
      },
      {
        "name": "getAll",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(getPlanetsState, (state: State) =>\n    selectAll(state)\n)"
      },
      {
        "name": "getAllPeople",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getAll,\n    state => state[0].results\n)"
      },
      {
        "name": "getAllPlanets",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getAll,\n    state => state[0].results\n)"
      },
      {
        "name": "getCount",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getAll,\n    state => state[0].count\n)"
      },
      {
        "name": "getCount",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getAll,\n    state => state[0].count\n)"
      },
      {
        "name": "getGreeting",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "apps/nf-e2e/src/support/app.po.ts",
        "type": "",
        "defaultValue": "() => cy.get('h1')"
      },
      {
        "name": "getPeopleEntities",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getPeopleState,\n    (state: State) => selectEntities(state)\n)"
      },
      {
        "name": "getPeopleError",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getPeopleState,\n    (state: State) => state.error\n)"
      },
      {
        "name": "getPeopleLoaded",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getPeopleState,\n    (state: State) => state.loaded\n)"
      },
      {
        "name": "getPeopleState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "",
        "defaultValue": "createFeatureSelector<PeoplePartialState, State>(\n    PEOPLE_FEATURE_KEY\n)"
      },
      {
        "name": "getPlanetsEntities",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getPlanetsState,\n    (state: State) => selectEntities(state)\n)"
      },
      {
        "name": "getPlanetsError",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getPlanetsState,\n    (state: State) => state.error\n)"
      },
      {
        "name": "getPlanetsLoaded",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getPlanetsState,\n    (state: State) => state.loaded\n)"
      },
      {
        "name": "getPlanetsState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "",
        "defaultValue": "createFeatureSelector<PlanetsPartialState, State>(\n    PLANETS_FEATURE_KEY\n)"
      },
      {
        "name": "getSelected",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getPeopleEntities,\n    getSelectedId,\n    (entities, selectedId) => selectedId && entities[selectedId]\n)"
      },
      {
        "name": "getSelected",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getPlanetsEntities,\n    getSelectedId,\n    (entities, selectedId) => selectedId && entities[selectedId]\n)"
      },
      {
        "name": "getSelectedId",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getPeopleState,\n    (state: State) => state.selectedId\n)"
      },
      {
        "name": "getSelectedId",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "",
        "defaultValue": "createSelector(\n    getPlanetsState,\n    (state: State) => state.selectedId\n)"
      },
      {
        "name": "init",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.actions.ts",
        "type": "",
        "defaultValue": "createAction('[People Page] Init')"
      },
      {
        "name": "init",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.actions.ts",
        "type": "",
        "defaultValue": "createAction('[Planets Page] Init')"
      },
      {
        "name": "initialState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.reducer.ts",
        "type": "State",
        "defaultValue": "peopleAdapter.getInitialState({\n  // set initial required properties\n  loaded: false,\n})"
      },
      {
        "name": "initialState",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.reducer.ts",
        "type": "State",
        "defaultValue": "planetsAdapter.getInitialState({\n    // set initial required properties\n    loaded: false,\n})"
      },
      {
        "name": "Large",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "stories/Button.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "loadPeopleFailure",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n    '[People/API] Load People Failure',\n    props<{ error: any }>()\n)"
      },
      {
        "name": "loadPeopleSuccess",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n    '[People/API] Load People Success',\n    props<{ people: PeopleEntity }>()\n)"
      },
      {
        "name": "loadPlanetsFailure",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n    '[Planets/API] Load Planets Failure',\n    props<{ error: any }>()\n)"
      },
      {
        "name": "loadPlanetsSuccess",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.actions.ts",
        "type": "",
        "defaultValue": "createAction(\n    '[Planets/API] Load Planets Success',\n    props<{ planets: PlanetsEntity }>()\n)"
      },
      {
        "name": "LoggedIn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "stories/Header.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedIn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "stories/Page.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedOut",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "stories/Header.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedOut",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "stories/Page.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "PEOPLE_FEATURE_KEY",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.reducer.ts",
        "type": "string",
        "defaultValue": "'people'"
      },
      {
        "name": "peopleAdapter",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.reducer.ts",
        "type": "EntityAdapter<PeopleEntity>",
        "defaultValue": "createEntityAdapter<\n    PeopleEntity\n    >()"
      },
      {
        "name": "peopleReducer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.reducer.ts",
        "type": "",
        "defaultValue": "createReducer(\n    initialState,\n    on(PeopleActions.init, (state) => ({ ...state, loaded: false, error: null })),\n    on(PeopleActions.loadPeopleSuccess, (state, { people }) =>\n        peopleAdapter.setOne(people, { ...state, loaded: true })\n    ),\n    on(PeopleActions.loadPeopleFailure, (state, { error }) => ({\n      ...state,\n      error,\n    }))\n)"
      },
      {
        "name": "peopleRoutes",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/people.module.ts",
        "type": "Route[]",
        "defaultValue": "[\n  {\n    path: \"\",\n    component: PeopleComponent,\n  },\n]"
      },
      {
        "name": "PLANETS_FEATURE_KEY",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.reducer.ts",
        "type": "string",
        "defaultValue": "'planets'"
      },
      {
        "name": "planetsAdapter",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.reducer.ts",
        "type": "EntityAdapter<PlanetsEntity>",
        "defaultValue": "createEntityAdapter<\n    PlanetsEntity\n    >()"
      },
      {
        "name": "planetsReducer",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.reducer.ts",
        "type": "",
        "defaultValue": "createReducer(\n    initialState,\n    on(PlanetsActions.init, (state) => ({ ...state, loaded: false, error: null })),\n    on(PlanetsActions.loadPlanetsSuccess, (state, { planets }) =>\n        planetsAdapter.setOne(planets, { ...state, loaded: true })\n    ),\n    on(PlanetsActions.loadPlanetsFailure, (state, { error }) => ({\n        ...state,\n        error,\n    }))\n)"
      },
      {
        "name": "planetsRoutes",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/planets.module.ts",
        "type": "Route[]",
        "defaultValue": "[\n  {\n    path: \"\",\n    component: PlanetsComponent,\n  },\n]"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "stories/Button.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Secondary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "stories/Button.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Small",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "stories/Button.stories.ts",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "starshipsRoutes",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/starships/src/lib/starships.module.ts",
        "type": "Route[]",
        "defaultValue": "[\n  {\n    path: '',\n    component: StarshipsComponent\n  }\n]"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "stories/Button.stories.ts",
        "type": "Story<Button>",
        "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "stories/Header.stories.ts",
        "type": "Story<Header>",
        "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "stories/Page.stories.ts",
        "type": "Story<Page>",
        "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
      },
      {
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "",
        "defaultValue": "peopleAdapter.getSelectors()"
      },
      {
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "",
        "defaultValue": "planetsAdapter.getSelectors()"
      }
    ],
    "functions": [
      {
        "name": "bootstrap",
        "file": "apps/api/src/main.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "reducer",
        "file": "libs/people/src/lib/+state/people.reducer.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "state"
          },
          {
            "name": "action"
          }
        ],
        "jsdoctags": [
          {
            "name": "state",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "action",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "reducer",
        "file": "libs/planets/src/lib/+state/planets.reducer.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "state"
          },
          {
            "name": "action"
          }
        ],
        "jsdoctags": [
          {
            "name": "state",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "action",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    ],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "apps/api/src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "apps/api/src/environments/environment.prod.ts",
          "type": "object",
          "defaultValue": "{\n  production: true,\n}"
        }
      ],
      "apps/api/src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "apps/api/src/environments/environment.ts",
          "type": "object",
          "defaultValue": "{\n  production: false,\n}"
        }
      ],
      "apps/nf/src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "apps/nf/src/environments/environment.prod.ts",
          "type": "object",
          "defaultValue": "{\n  production: true,\n}"
        }
      ],
      "apps/nf/src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "apps/nf/src/environments/environment.ts",
          "type": "object",
          "defaultValue": "{\n  production: false,\n}"
        }
      ],
      "libs/people/src/lib/+state/people.selectors.ts": [
        {
          "name": "getAll",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(getPeopleState, (state: State) =>\n    selectAll(state)\n)"
        },
        {
          "name": "getAllPeople",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getAll,\n    state => state[0].results\n)"
        },
        {
          "name": "getCount",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getAll,\n    state => state[0].count\n)"
        },
        {
          "name": "getPeopleEntities",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getPeopleState,\n    (state: State) => selectEntities(state)\n)"
        },
        {
          "name": "getPeopleError",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getPeopleState,\n    (state: State) => state.error\n)"
        },
        {
          "name": "getPeopleLoaded",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getPeopleState,\n    (state: State) => state.loaded\n)"
        },
        {
          "name": "getPeopleState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.selectors.ts",
          "type": "",
          "defaultValue": "createFeatureSelector<PeoplePartialState, State>(\n    PEOPLE_FEATURE_KEY\n)"
        },
        {
          "name": "getSelected",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getPeopleEntities,\n    getSelectedId,\n    (entities, selectedId) => selectedId && entities[selectedId]\n)"
        },
        {
          "name": "getSelectedId",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getPeopleState,\n    (state: State) => state.selectedId\n)"
        },
        {
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.selectors.ts",
          "type": "",
          "defaultValue": "peopleAdapter.getSelectors()"
        }
      ],
      "libs/planets/src/lib/+state/planets.selectors.ts": [
        {
          "name": "getAll",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(getPlanetsState, (state: State) =>\n    selectAll(state)\n)"
        },
        {
          "name": "getAllPlanets",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getAll,\n    state => state[0].results\n)"
        },
        {
          "name": "getCount",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getAll,\n    state => state[0].count\n)"
        },
        {
          "name": "getPlanetsEntities",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getPlanetsState,\n    (state: State) => selectEntities(state)\n)"
        },
        {
          "name": "getPlanetsError",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getPlanetsState,\n    (state: State) => state.error\n)"
        },
        {
          "name": "getPlanetsLoaded",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getPlanetsState,\n    (state: State) => state.loaded\n)"
        },
        {
          "name": "getPlanetsState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.selectors.ts",
          "type": "",
          "defaultValue": "createFeatureSelector<PlanetsPartialState, State>(\n    PLANETS_FEATURE_KEY\n)"
        },
        {
          "name": "getSelected",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getPlanetsEntities,\n    getSelectedId,\n    (entities, selectedId) => selectedId && entities[selectedId]\n)"
        },
        {
          "name": "getSelectedId",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.selectors.ts",
          "type": "",
          "defaultValue": "createSelector(\n    getPlanetsState,\n    (state: State) => state.selectedId\n)"
        },
        {
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.selectors.ts",
          "type": "",
          "defaultValue": "planetsAdapter.getSelectors()"
        }
      ],
      "apps/nf-e2e/src/support/app.po.ts": [
        {
          "name": "getGreeting",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "apps/nf-e2e/src/support/app.po.ts",
          "type": "",
          "defaultValue": "() => cy.get('h1')"
        }
      ],
      "libs/people/src/lib/+state/people.actions.ts": [
        {
          "name": "init",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.actions.ts",
          "type": "",
          "defaultValue": "createAction('[People Page] Init')"
        },
        {
          "name": "loadPeopleFailure",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n    '[People/API] Load People Failure',\n    props<{ error: any }>()\n)"
        },
        {
          "name": "loadPeopleSuccess",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n    '[People/API] Load People Success',\n    props<{ people: PeopleEntity }>()\n)"
        }
      ],
      "libs/planets/src/lib/+state/planets.actions.ts": [
        {
          "name": "init",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.actions.ts",
          "type": "",
          "defaultValue": "createAction('[Planets Page] Init')"
        },
        {
          "name": "loadPlanetsFailure",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n    '[Planets/API] Load Planets Failure',\n    props<{ error: any }>()\n)"
        },
        {
          "name": "loadPlanetsSuccess",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.actions.ts",
          "type": "",
          "defaultValue": "createAction(\n    '[Planets/API] Load Planets Success',\n    props<{ planets: PlanetsEntity }>()\n)"
        }
      ],
      "libs/people/src/lib/+state/people.reducer.ts": [
        {
          "name": "initialState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.reducer.ts",
          "type": "State",
          "defaultValue": "peopleAdapter.getInitialState({\n  // set initial required properties\n  loaded: false,\n})"
        },
        {
          "name": "PEOPLE_FEATURE_KEY",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.reducer.ts",
          "type": "string",
          "defaultValue": "'people'"
        },
        {
          "name": "peopleAdapter",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.reducer.ts",
          "type": "EntityAdapter<PeopleEntity>",
          "defaultValue": "createEntityAdapter<\n    PeopleEntity\n    >()"
        },
        {
          "name": "peopleReducer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/+state/people.reducer.ts",
          "type": "",
          "defaultValue": "createReducer(\n    initialState,\n    on(PeopleActions.init, (state) => ({ ...state, loaded: false, error: null })),\n    on(PeopleActions.loadPeopleSuccess, (state, { people }) =>\n        peopleAdapter.setOne(people, { ...state, loaded: true })\n    ),\n    on(PeopleActions.loadPeopleFailure, (state, { error }) => ({\n      ...state,\n      error,\n    }))\n)"
        }
      ],
      "libs/planets/src/lib/+state/planets.reducer.ts": [
        {
          "name": "initialState",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.reducer.ts",
          "type": "State",
          "defaultValue": "planetsAdapter.getInitialState({\n    // set initial required properties\n    loaded: false,\n})"
        },
        {
          "name": "PLANETS_FEATURE_KEY",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.reducer.ts",
          "type": "string",
          "defaultValue": "'planets'"
        },
        {
          "name": "planetsAdapter",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.reducer.ts",
          "type": "EntityAdapter<PlanetsEntity>",
          "defaultValue": "createEntityAdapter<\n    PlanetsEntity\n    >()"
        },
        {
          "name": "planetsReducer",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/+state/planets.reducer.ts",
          "type": "",
          "defaultValue": "createReducer(\n    initialState,\n    on(PlanetsActions.init, (state) => ({ ...state, loaded: false, error: null })),\n    on(PlanetsActions.loadPlanetsSuccess, (state, { planets }) =>\n        planetsAdapter.setOne(planets, { ...state, loaded: true })\n    ),\n    on(PlanetsActions.loadPlanetsFailure, (state, { error }) => ({\n        ...state,\n        error,\n    }))\n)"
        }
      ],
      "stories/Button.stories.ts": [
        {
          "name": "Large",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "stories/Button.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "stories/Button.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Secondary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "stories/Button.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Small",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "stories/Button.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "stories/Button.stories.ts",
          "type": "Story<Button>",
          "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
        }
      ],
      "stories/Header.stories.ts": [
        {
          "name": "LoggedIn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "stories/Header.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "LoggedOut",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "stories/Header.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "stories/Header.stories.ts",
          "type": "Story<Header>",
          "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
        }
      ],
      "stories/Page.stories.ts": [
        {
          "name": "LoggedIn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "stories/Page.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "LoggedOut",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "stories/Page.stories.ts",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "stories/Page.stories.ts",
          "type": "Story<Page>",
          "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
        }
      ],
      "libs/people/src/lib/people.module.ts": [
        {
          "name": "peopleRoutes",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/people/src/lib/people.module.ts",
          "type": "Route[]",
          "defaultValue": "[\n  {\n    path: \"\",\n    component: PeopleComponent,\n  },\n]"
        }
      ],
      "libs/planets/src/lib/planets.module.ts": [
        {
          "name": "planetsRoutes",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/planets/src/lib/planets.module.ts",
          "type": "Route[]",
          "defaultValue": "[\n  {\n    path: \"\",\n    component: PlanetsComponent,\n  },\n]"
        }
      ],
      "libs/starships/src/lib/starships.module.ts": [
        {
          "name": "starshipsRoutes",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "libs/starships/src/lib/starships.module.ts",
          "type": "Route[]",
          "defaultValue": "[\n  {\n    path: '',\n    component: StarshipsComponent\n  }\n]"
        }
      ]
    },
    "groupedFunctions": {
      "apps/api/src/main.ts": [
        {
          "name": "bootstrap",
          "file": "apps/api/src/main.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "libs/people/src/lib/+state/people.reducer.ts": [
        {
          "name": "reducer",
          "file": "libs/people/src/lib/+state/people.reducer.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "state"
            },
            {
              "name": "action"
            }
          ],
          "jsdoctags": [
            {
              "name": "state",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "libs/planets/src/lib/+state/planets.reducer.ts": [
        {
          "name": "reducer",
          "file": "libs/planets/src/lib/+state/planets.reducer.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "state"
            },
            {
              "name": "action"
            }
          ],
          "jsdoctags": [
            {
              "name": "state",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "action",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": {
    "name": "<root>",
    "kind": "module",
    "className": "AppModule",
    "children": [
      {
        "name": "routes",
        "filename": "apps/nf/src/app/app-routing.module.ts",
        "module": "AppRoutingModule",
        "children": [
          {
            "path": "",
            "pathMatch": "full",
            "redirectTo": "people"
          },
          {
            "path": "people",
            "loadChildren": "@ngrx-flow/people#PeopleModule",
            "children": [
              {
                "kind": "module",
                "children": [],
                "module": "PeopleModule"
              }
            ]
          },
          {
            "path": "planets",
            "loadChildren": "@ngrx-flow/planets#PlanetsModule",
            "children": [
              {
                "kind": "module",
                "children": [],
                "module": "PlanetsModule"
              }
            ]
          },
          {
            "path": "starships",
            "loadChildren": "@ngrx-flow/starships#StarshipsModule",
            "children": [
              {
                "kind": "module",
                "children": [],
                "module": "StarshipsModule"
              }
            ]
          }
        ],
        "kind": "module"
      }
    ]
  },
  "coverage": {
    "count": 2,
    "status": "low",
    "files": [
      {
        "filePath": "apps/api/src/app/app.controller.ts",
        "type": "controller",
        "linktype": "controller",
        "name": "AppController",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "apps/api/src/app/app.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AppService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "apps/api/src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "apps/api/src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "apps/api/src/main.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "bootstrap",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "apps/nf-e2e/src/support/app.po.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getGreeting",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "apps/nf-e2e/src/support/commands.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Chainable",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "apps/nf/src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "apps/nf/src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "apps/nf/src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/api-interfaces/src/lib/api-interfaces.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Message",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "init",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadPeopleFailure",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadPeopleSuccess",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.effects.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "PeopleEffects",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.facade.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "PeopleFacade",
        "coveragePercent": 28,
        "coverageCount": "2/7",
        "status": "medium"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.models.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "PeopleEntity",
        "coveragePercent": 16,
        "coverageCount": "1/6",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.models.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Person",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.reducer.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "PeoplePartialState",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.reducer.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "State",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.reducer.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "reducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "initialState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PEOPLE_FEATURE_KEY",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "peopleAdapter",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "peopleReducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getAll",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getAllPeople",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getCount",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getPeopleEntities",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getPeopleError",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getPeopleLoaded",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getPeopleState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getSelected",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getSelectedId",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/+state/people.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/component/people/people.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PeopleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/people/src/lib/people.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "peopleRoutes",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "init",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadPlanetsFailure",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.actions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "loadPlanetsSuccess",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.effects.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "PlanetsEffects",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.facade.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "PlanetsFacade",
        "coveragePercent": 28,
        "coverageCount": "2/7",
        "status": "medium"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.models.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "PlanetsEntity",
        "coveragePercent": 16,
        "coverageCount": "1/6",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.models.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Worlds",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.reducer.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "PlanetsPartialState",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.reducer.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "State",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.reducer.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "reducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "initialState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PLANETS_FEATURE_KEY",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "planetsAdapter",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.reducer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "planetsReducer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getAll",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getAllPlanets",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getCount",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getPlanetsEntities",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getPlanetsError",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getPlanetsLoaded",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getPlanetsState",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getSelected",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getSelectedId",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/+state/planets.selectors.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/component/planets/planets.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PlanetsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/planets/src/lib/planets.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "planetsRoutes",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "libs/shared/services/src/lib/swapi.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "SwapiService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "libs/starships/src/lib/component/starships/starships.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "StarshipsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "libs/starships/src/lib/starships.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "starshipsRoutes",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Large",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Secondary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Small",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedOut",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedOut",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "stories/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonComponent",
        "coveragePercent": 83,
        "coverageCount": "5/6",
        "status": "very-good"
      },
      {
        "filePath": "stories/header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "stories/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      }
    ]
  }
}
